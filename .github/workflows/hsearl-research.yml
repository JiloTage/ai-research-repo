name: HSEARL Research Pipeline

on:
  schedule:
    # 20分ごとに実行
    - cron: '*/20 * * * *'
  workflow_dispatch:  # 手動実行も可能にする
  push:
    branches:
      - master
    paths:
      - 'scripts/**'
      - '.github/workflows/hsearl-research.yml'

jobs:
  research:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        uv add feedparser
    
    - name: Run research pipeline
      id: pipeline
      run: |
        source .venv/bin/activate
        python scripts/main_pipeline.py > pipeline_output.txt 2>&1
        cat pipeline_output.txt
        
        # Claude Codeのタスクがあるかチェック
        if grep -q "Claude Codeさん、以下を実行してください" pipeline_output.txt; then
          echo "claude_tasks=true" >> $GITHUB_OUTPUT
          echo "CLAUDE_TASKS=true" >> $GITHUB_ENV
        else
          echo "claude_tasks=false" >> $GITHUB_OUTPUT
          echo "CLAUDE_TASKS=false" >> $GITHUB_ENV
        fi
    
    - name: Check for changes
      id: check_changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push search results
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "feat: ArXiv論文検索実行 - $(date +'%Y-%m-%d %H:%M:%S')" -m "新しい論文を検索してサーベイ予定リストを更新しました。"
        git push
    
    - name: Create Claude Code task issue
      if: steps.pipeline.outputs.claude_tasks == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const pipelineOutput = fs.readFileSync('pipeline_output.txt', 'utf8');
          
          // Extract Claude Code instructions
          const claudeInstructions = pipelineOutput.split('🤖 Claude Codeさん、以下を実行してください:')[1];
          
          const issueBody = `## 🤖 Claude Code実行要請
          
          パイプラインが完了し、以下のタスクでClaude Codeの実行が必要です：
          
          ${claudeInstructions || '詳細は最新のパイプライン実行ログを確認してください。'}
          
          ### 実行手順
          
          1. **論文サマリー生成** (該当する場合)
             - CLAUDE.mdの「論文サマリー生成手順」を参照
             - \`docs/prompts/paper_summary_prompt.md\`の詳細手順に従う
             - 1件の論文を処理してdocs/surveys/に保存
          
          2. **アイデア生成** (該当する場合)
             - CLAUDE.mdの「アイデア生成手順」を参照
             - \`docs/prompts/idea_generation_prompt.md\`の詳細手順に従う
             - 未処理のサマリーからアイデアを生成してdocs/idea/に保存
          
          ### 完了後
          
          処理が完了したら、このissueをcloseしてください。
          
          ---
          *自動生成日時: ${new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'})}*`;
          
          // Check if there's already an open issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'claude-code-task'
          });
          
          if (issues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 Claude Code実行要請 - ${new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'})}`,
              body: issueBody,
              labels: ['claude-code-task', 'automation']
            });
          } else {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues.data[0].number,
              body: issueBody
            });
          }
    
    - name: Cleanup
      run: |
        rm -f pipeline_output.txt